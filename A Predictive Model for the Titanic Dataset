{"cells":[{"source":"<a href=\"https://www.kaggle.com/code/petestienpeter/a-predictive-model-for-the-titanic-dataset?scriptVersionId=177821696\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","execution_count":1,"id":"fc67ba45","metadata":{"execution":{"iopub.execute_input":"2024-05-15T13:51:01.565574Z","iopub.status.busy":"2024-05-15T13:51:01.565038Z","iopub.status.idle":"2024-05-15T13:51:04.967782Z","shell.execute_reply":"2024-05-15T13:51:04.966373Z"},"papermill":{"duration":3.414355,"end_time":"2024-05-15T13:51:04.970697","exception":false,"start_time":"2024-05-15T13:51:01.556342","status":"completed"},"tags":[]},"outputs":[],"source":["# Import necessary libraries\n","import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","import unittest"]},{"cell_type":"code","execution_count":2,"id":"cb95b736","metadata":{"execution":{"iopub.execute_input":"2024-05-15T13:51:04.984124Z","iopub.status.busy":"2024-05-15T13:51:04.982454Z","iopub.status.idle":"2024-05-15T13:51:06.285705Z","shell.execute_reply":"2024-05-15T13:51:06.283989Z"},"papermill":{"duration":1.313703,"end_time":"2024-05-15T13:51:06.289715","exception":false,"start_time":"2024-05-15T13:51:04.976012","status":"completed"},"tags":[]},"outputs":[],"source":["# Load preprocessed dataset exported from R\n","dataset = pd.read_csv(\"/kaggle/input/analysis-of-titanic-survival-1m-dataset/processed_titanic_dataset.csv\")"]},{"cell_type":"code","execution_count":3,"id":"26f20662","metadata":{"execution":{"iopub.execute_input":"2024-05-15T13:51:06.302757Z","iopub.status.busy":"2024-05-15T13:51:06.302257Z","iopub.status.idle":"2024-05-15T13:51:06.356683Z","shell.execute_reply":"2024-05-15T13:51:06.355232Z"},"papermill":{"duration":0.065174,"end_time":"2024-05-15T13:51:06.360338","exception":false,"start_time":"2024-05-15T13:51:06.295164","status":"completed"},"tags":[]},"outputs":[],"source":["# Split dataset into features (X) and target variable (y)\n","X = dataset.drop(columns=[\"Survived\"])\n","y = dataset[\"Survived\"]"]},{"cell_type":"code","execution_count":4,"id":"6e85c836","metadata":{"execution":{"iopub.execute_input":"2024-05-15T13:51:06.372588Z","iopub.status.busy":"2024-05-15T13:51:06.372115Z","iopub.status.idle":"2024-05-15T13:51:06.584288Z","shell.execute_reply":"2024-05-15T13:51:06.582881Z"},"papermill":{"duration":0.22196,"end_time":"2024-05-15T13:51:06.587468","exception":false,"start_time":"2024-05-15T13:51:06.365508","status":"completed"},"tags":[]},"outputs":[],"source":["# Split data into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"]},{"cell_type":"code","execution_count":5,"id":"56944ed2","metadata":{"execution":{"iopub.execute_input":"2024-05-15T13:51:06.601233Z","iopub.status.busy":"2024-05-15T13:51:06.600804Z","iopub.status.idle":"2024-05-15T13:51:06.606359Z","shell.execute_reply":"2024-05-15T13:51:06.604985Z"},"papermill":{"duration":0.016035,"end_time":"2024-05-15T13:51:06.609868","exception":false,"start_time":"2024-05-15T13:51:06.593833","status":"completed"},"tags":[]},"outputs":[],"source":["# Initialize Random Forest classifier\n","rf_classifier = RandomForestClassifier(n_estimators=100, random_state=42)"]},{"cell_type":"code","execution_count":6,"id":"3635f8cb","metadata":{"execution":{"iopub.execute_input":"2024-05-15T13:51:06.623011Z","iopub.status.busy":"2024-05-15T13:51:06.622552Z","iopub.status.idle":"2024-05-15T13:55:15.52068Z","shell.execute_reply":"2024-05-15T13:55:15.518865Z"},"papermill":{"duration":248.913135,"end_time":"2024-05-15T13:55:15.528332","exception":false,"start_time":"2024-05-15T13:51:06.615197","status":"completed"},"tags":[]},"outputs":[{"data":{"text/html":["<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(random_state=42)</pre></div></div></div></div></div>"],"text/plain":["RandomForestClassifier(random_state=42)"]},"execution_count":6,"metadata":{},"output_type":"execute_result"}],"source":["# Train the classifier\n","rf_classifier.fit(X_train, y_train)"]},{"cell_type":"code","execution_count":7,"id":"f1f3ab06","metadata":{"execution":{"iopub.execute_input":"2024-05-15T13:55:15.541213Z","iopub.status.busy":"2024-05-15T13:55:15.54011Z","iopub.status.idle":"2024-05-15T13:55:25.081675Z","shell.execute_reply":"2024-05-15T13:55:25.080245Z"},"papermill":{"duration":9.55142,"end_time":"2024-05-15T13:55:25.084993","exception":false,"start_time":"2024-05-15T13:55:15.533573","status":"completed"},"tags":[]},"outputs":[],"source":["# Predict on the test set\n","y_pred = rf_classifier.predict(X_test)"]},{"cell_type":"code","execution_count":8,"id":"9a828c9b","metadata":{"execution":{"iopub.execute_input":"2024-05-15T13:55:25.098155Z","iopub.status.busy":"2024-05-15T13:55:25.097761Z","iopub.status.idle":"2024-05-15T13:55:25.127907Z","shell.execute_reply":"2024-05-15T13:55:25.125875Z"},"papermill":{"duration":0.040623,"end_time":"2024-05-15T13:55:25.131033","exception":false,"start_time":"2024-05-15T13:55:25.09041","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Accuracy: 0.84153\n"]}],"source":["# Evaluate the model\n","accuracy = accuracy_score(y_test, y_pred)\n","print(\"Accuracy:\", accuracy)"]},{"cell_type":"code","execution_count":9,"id":"1cc506d1","metadata":{"execution":{"iopub.execute_input":"2024-05-15T13:55:25.144367Z","iopub.status.busy":"2024-05-15T13:55:25.143934Z","iopub.status.idle":"2024-05-15T13:55:25.576414Z","shell.execute_reply":"2024-05-15T13:55:25.574586Z"},"papermill":{"duration":0.442581,"end_time":"2024-05-15T13:55:25.579394","exception":false,"start_time":"2024-05-15T13:55:25.136813","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["\n","Classification Report:\n","              precision    recall  f1-score   support\n","\n","           0       0.87      0.88      0.87    123847\n","           1       0.80      0.78      0.79     76153\n","\n","    accuracy                           0.84    200000\n","   macro avg       0.83      0.83      0.83    200000\n","weighted avg       0.84      0.84      0.84    200000\n","\n"]}],"source":["# Print classification report and confusion matrix\n","print(\"\\nClassification Report:\")\n","print(classification_report(y_test, y_pred))"]},{"cell_type":"code","execution_count":10,"id":"36400c8a","metadata":{"execution":{"iopub.execute_input":"2024-05-15T13:55:25.594648Z","iopub.status.busy":"2024-05-15T13:55:25.593486Z","iopub.status.idle":"2024-05-15T13:55:25.645281Z","shell.execute_reply":"2024-05-15T13:55:25.643838Z"},"papermill":{"duration":0.06246,"end_time":"2024-05-15T13:55:25.648303","exception":false,"start_time":"2024-05-15T13:55:25.585843","status":"completed"},"tags":[]},"outputs":[],"source":["# Calculate confusion matrix\n","conf_matrix = confusion_matrix(y_test, y_pred)"]},{"cell_type":"code","execution_count":11,"id":"1478a9d7","metadata":{"execution":{"iopub.execute_input":"2024-05-15T13:55:25.662884Z","iopub.status.busy":"2024-05-15T13:55:25.66239Z","iopub.status.idle":"2024-05-15T13:55:25.885697Z","shell.execute_reply":"2024-05-15T13:55:25.884419Z"},"papermill":{"duration":0.234636,"end_time":"2024-05-15T13:55:25.888691","exception":false,"start_time":"2024-05-15T13:55:25.654055","status":"completed"},"tags":[]},"outputs":[{"data":{"image/png":"","text/plain":["<Figure size 800x600 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["# Plot confusion matrix as a heatmap\n","plt.figure(figsize=(8, 6))\n","sns.heatmap(conf_matrix, annot=True, fmt=\"d\", cmap=\"Blues\", cbar=False)\n","plt.title(\"Confusion Matrix\")\n","plt.xlabel(\"Predicted Label\")\n","plt.ylabel(\"True Label\")\n","plt.show()"]},{"cell_type":"code","execution_count":12,"id":"d6d8e2ac","metadata":{"execution":{"iopub.execute_input":"2024-05-15T13:55:25.90602Z","iopub.status.busy":"2024-05-15T13:55:25.904347Z","iopub.status.idle":"2024-05-15T13:55:25.938719Z","shell.execute_reply":"2024-05-15T13:55:25.937222Z"},"papermill":{"duration":0.045331,"end_time":"2024-05-15T13:55:25.941897","exception":false,"start_time":"2024-05-15T13:55:25.896566","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Unit tests passed successfully!\n"]}],"source":["# Calculate accuracy score\n","accuracy = accuracy_score(y_test, y_pred)\n","\n","# Check if accuracy is between 0 and 1\n","assert 0 <= accuracy <= 1, \"Accuracy score should be between 0 and 1\"\n","\n","# Check if accuracy is not None\n","assert accuracy is not None, \"Accuracy score should not be None\"\n","\n","# Print success message if all assertions pass\n","print(\"Unit tests passed successfully!\")"]}],"metadata":{"kaggle":{"accelerator":"none","dataSources":[{"sourceId":177807809,"sourceType":"kernelVersion"}],"dockerImageVersionId":30698,"isGpuEnabled":false,"isInternetEnabled":false,"language":"python","sourceType":"notebook"},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.13"},"papermill":{"default_parameters":{},"duration":268.864093,"end_time":"2024-05-15T13:55:27.078448","environment_variables":{},"exception":null,"input_path":"__notebook__.ipynb","output_path":"__notebook__.ipynb","parameters":{},"start_time":"2024-05-15T13:50:58.214355","version":"2.5.0"}},"nbformat":4,"nbformat_minor":5}